*vimmyway.txt*  For Vim version 8.2.  Last change: 2021 Feb 20

Reminder help file for my most common tips          *vimmyway*

1. Help commands            |vmw-intro|
2. Window navigation        |vmw-win-navigation|
3. GUI font                 |vmw-gui-font|
4. German keyboards sucks!  |vmw-german-keyboard|
5. Capture notes            |vmw-notes|
6. Tips                     |vmw-tips|

==============================================================================
1. Vim, my way                                                   *vimway-intro*

In the years I used Vim, a lot of interesting stuff comes my way. A fast as I
read valueable Vim tips and how todos, the things yust disappear from my brain.  

Here is the place to store the worthwile things. 

------------------------------------------------------------------------------
2. Window navigation                                       *vmw-win-navigation*
To ease navigation between the vertical and horizontal splitted windows, this 
mappings helpsme a lot.

The Vim way: ~
The first option uses the hjkl keys on the home row. Maybe the most vimish way.  >
	tnoremap <A-h> <C-\><C-n><C-w>h
	tnoremap <A-j> <C-\><C-n><C-w>j
	tnoremap <A-k> <C-\><C-n><C-w>k
	tnoremap <A-l> <C-\><C-n><C-w>l
	nnoremap <A-h> <C-w>h
	nnoremap <A-j> <C-w>j
	nnoremap <A-k> <C-w>k
	nnoremap <A-l> <C-w>l
<
The CUA way: ~
Well, the second option uses the cursor keys. Works very well!  >
	nnoremap <S-down>  <C-w>j
	nnoremap <S-up>    <C-w>k
	nnoremap <S-left>  <C-w>h
	nnoremap <S-right> <C-w>l
<
Way not use both?

------------------------------------------------------------------------------
3. GUI font                                                      *vmw-gui-font*
Fonts are alway a matter of taste. Whatever font is used, they appear of
different display in different sizes. Set an new font size becomes a habit.
This lines of Vim script does the trick: >
	if has('gui')
		nnoremap <leader>3 :set guifont=Consolas:h12 linespace=1<CR>
		nnoremap <leader>2 :set guifont=Consolas:h11 linespace=1<CR>
		nnoremap <leader>1 :set guifont=Consolas:h10  linespace=1<CR>
		call feedkeys(mapleader.'1') " default font
		colorscheme breeze
		set guicursor+=a:blinkon0
	endif
<
------------------------------------------------------------------------------
4. German keyboard layout sucks!                          *vmw-german-keyboard*
Lets say it clear: Vim is made for american keyboard layout. All othter
layouts suck. At least the German one. To make the "[". "], "{", "}" and the
search keys more accesable in normal mode, I use this in vimrc. >

        set langmap=ü/,Ü?,ö[,ä],Ö{,Ä} 
<
Or change to the american keyboard layout in the OS.  Especially when you
spend a lot of time in Vim.  Here is a short list of the most important shifted keys:

	1=!`  `2=@`  `3=#`  `4=$`  `5=%`  `6=^`  7=&`  `8=*`  `9=(` `0=)

------------------------------------------------------------------------------
5. Capture notes                                                    *vmw-notes*

Quick access to a simple text file to capture your ideas. >
    	nnoremap <Leader>nn :drop ~\.notes\notes.md<cr>
        nnoremap <Leader>nd :drop ~\.notes\diary.md<cr>
<
------------------------------------------------------------------------------
6. Tips                                                              *vmw-tips*

Clean up buffers ~
Want to wipe out all buffers in current session containing `snap` in its name?
Just type `:bw *snap<TAB><C-a><CR>`. The `<TAB>` is required for take a quick 
look which buffers will be wiped-out. Another solution might be this: >

	:bufdo if expand("%") =~ '.*snap.*' | bw | endif
<

Use templates ~
Want to start new files with a template. Read more here `:help template`.

Custom Command Completion ~
Here is a Vim script to show custom completion of a new command: >

	function! CompleteFavPath(arg_lead, cmd_line, cur_pos)
	  let l:matchingKeys = ""
	  for k in sort(keys(g:workspacePathDict))
	    if match(k, a:arg_lead) >= 0
	      let l:matchingKeys .=  k . "\n"
	    endif
	  endfor
	  return l:matchingKeys
	endfunction

	function! GotoFavPath(pathKey)
	  if has_key(g:workspacePathDict, a:pathKey)
	    exe "cd " . g:workspacePathDict[a:pathKey]
	  endif
	endfunction
	let g:workspacePathDict = {"vim": "~\\vimfiles", "emacs": "~\\.emacs.d"}
	command! -nargs=1 -complete=custom,CompleteFavPath WorkspacePath call GotoFavPath('<args>')
<

How to replace a word in lines im interested in? ~
For example, replace 'foo' to 'hey' if a line contains 'hi'.  This line does
the trick: `:g/hi/ s/foo/hey/g`

GREP ~

Vimgrep can run on any OS. But performance is somehow week. Speed up on
recursive operation can be achieved by setting a proper value for option
'wildoptions' to ignore a set of sub-directories.

Even under Windows, grep-commands can run on bigger code basis even without
any special tool. The method uses a kind of index-file with all C an H files.
This file is used by Windows-standard program `findstr`.  Works quit fast! >

	call writefile(split(globpath('.', '**/*.[ch]')), "files")
	set gp=findstr\ /N\ /F:files 
<
A nice addition to spice up the `:grep` experience: Run `:grep` with the
current word under cursor, highlighted in the results. Needs option `hlsearch`
to be set. >
	nnoremap <Leader>g :let @/="<C-r><C-w>"<CR>:silent grep <C-r><C-w> . <CR> :cfirst<CR>
<
Ripgrep works very well on Windows. To setup Vim for rg use this >
	set gp=rg\ --vimgrep\ -tc gfm=%f:%l:%c:%m
<

Show unsaved buffers ~
Simply enter `:ls +` to get a filtered view of unsaved buffers. The unfiltered
output of the `:ls` command indicates those buffers with the plus sign.

View last messages ~
The `"g<" command can be used to see the last page of previous command output.
Use this quit often when changing my plugins.

How to remove ^M ~
In command mode you can use this substitute command `:%s/<C-v><C-m>//`.  If
you like to remove the annoying character from VimL script, use `:%s/\r//e`.
The optional `e` flag suppresses error messages if no ^M is found. Therefor, I
would recommend to use this flag from scripts.

Netrw~
Netrw comes as a prepacked plugin in Vims standard installation. To start
Netrw, type `:Explore`. The new Netrw buffer that will show up can be
customized to match your needs. This may be a good start: >
	let g:netrw_use_errorwindow = 0
	let g:netrw_liststyle = 1
<

Navigation is supported by the bookmark feature. Netrw stores bookmarks
permanently in file .netrwbook, located in Vims home directory. To store a new
bookmark press `mb`. To remove it, press `mB`. A preceding bookmark number is
accepted. To find out the bookmark number for all bookmark, press `qb`. To go
to a bookmark, press `gb`.

The list of bookmarks also displays the history marks. Those history marks are
set when visiting a new directory. Use keys `u` and `U` to walk backward and
forward in Netrws directory history.

To change the current directory `:pwd` to the actual display Netrw directory
press key `c`.

WORDS and words ~
Vim defines a WORD as a set of consecutive characters. The normal mode command
`dW` will delete A/path/like/this assuming cursors positions is on the A
character. Using normal mode command `dw` (cursors position is on A character)
will delete only the A.

------------------------------------------------------------------------------
 vim:tw=78:ts=8:noet:ft=help:norl:

