*mastering-vim.txt*  For Vim version 9.0.  Last change: 2022 Dec 29

Reminder help file for my most common tips          *vimmyway*

1. Help commands            |mastering-vim-intro|
2. Window navigation        |mastering-vim-win-navigation|
3. GUI font & color         |mastering-vim-visuals|
4. German keyboards sucks!  |mastering-vim-german-keyboard|
5. Capture notes            |mastering-vim-notes|
6. Tips                     |mastering-vim-tips|
7. Vim Script              |mastering-vim-script|  

==============================================================================
1. Vim, my way                                                    *vimway-intro*

In the years I used Vim, a lot of interesting stuff comes my way. A fast as I
read valueable Vim tips and how todos, the things yust disappear from my brain.

Here is the place to store the worthwile things.

------------------------------------------------------------------------------
2. Window navigation                              *mastering-vim-win-navigation*

To ease navigation between the vertical and horizontal splitted windows, this
mappings helpsme a lot.

The Vim way: ~
The first option uses the hjkl keys on the home row. Maybe the most vimish way.
  >
   tnoremap <A-h> <C-\><C-n><C-w>h
   tnoremap <A-j> <C-\><C-n><C-w>j
   tnoremap <A-k> <C-\><C-n><C-w>k
   tnoremap <A-l> <C-\><C-n><C-w>l
   nnoremap <A-h> <C-w>h
   nnoremap <A-j> <C-w>j
   nnoremap <A-k> <C-w>k
   nnoremap <A-l> <C-w>l
<
The CUA way: ~
Well, the second option uses the cursor keys. Works very well!
  >
   nnoremap <S-down>  <C-w>j
   nnoremap <S-up>    <C-w>k
   nnoremap <S-left>  <C-w>h
   nnoremap <S-right> <C-w>l
<
Way not use both?

------------------------------------------------------------------------------
3. Visuals                                               *mastering-vim-visuals*

Fonts are alway a matter of taste and the screen size. Change the font size
each time by setting option 'guifont' becomes very annoying. The following
lines of Vim script does the trick:
>
   let FontFamily = {-> escape(split(&gfn, ":")[0], ' ')}
   let IncFontHeight = {-> string(str2nr(split(&gfn, ":h")[1]) + 1)}
   let DecFontHeight = {-> string(str2nr(split(&gfn, ":h")[1]) - 1)}
   nnoremap <expr> <C-ScrollWheelUp> ":set guifont="..FontFamily()..":h"..IncFontHeight().."<CR>"
   nnoremap <expr> <C-ScrollWheelDown> ":set guifont="..FontFamily()..":h"..DecFontHeight().."<CR>"
<
It might a good idea to use different colorschemes for GUI and terminal.
After event VimEnter option 'term' indicates the UI type. Choose the
colorscheme that works best for you.
 >
    autocmd VimEnter * execute "colorscheme" (&term == "builtin_gui") ? "twotone" : "apollo"
<
------------------------------------------------------------------------------
4. German keyboard layout sucks!                 *mastering-vim-german-keyboard*

Lets say it clear: Vim is made for american keyboard layout. All othter
layouts suck. At least the German one. To make the "[". "], "{", "}" and the
search keys more accesable in normal mode, I use this in vimrc. >

    execute "set langmap=\<Char-252>/"
    execute "set langmap+=\<Char-220>?"
    execute "set langmap+=\<Char-246>["
    execute "set langmap+=\<Char-228>]"
    execute "set langmap+=\<Char-214>{"
    execute "set langmap+=\<Char-196>}"
<
Or change to the american keyboard layout in the OS.  Especially when you spend
a lot of time in Vim.  Here is a short list of the most important keys with
enabled US keyboard:
>
   Nonshifted key: ^ 1 2 3 4 5 6 7 8 9 0 ß ´
   US keyboard:    ` 1 2 3 4 5 6 7 8 9 0 - =
   shifted US:     ~ ! @ # $ % ^ & * ( ) _ +
<
Just in case to enter german umlaut without switching back from US to german
keyboard layout, press 'C-k' followed by 'a' ':' for an 'ä'.

------------------------------------------------------------------------------
5. Capture notes                                           *mastering-vim-notes*

Quick access to a simple text file to capture your ideas. >
        nnoremap <Leader>nn :drop ~\.notes\notes.md<cr>
        nnoremap <Leader>nd :drop ~\.notes\diary.md<cr>
<
------------------------------------------------------------------------------
6. Tips                                                     *mastering-vim-tips*

The maginc of 'g' ~
Some usefule 'g' commands:

'g<' command can be used to see the last page of previous command output.  Use
this quit often when changing my plugins.

'gn' Select the match of your last search:
1. Move to the last searched match.
2. Switch to VISUAL mode (if you weren’t in VISUAL mode already).
3. Select the match.
4. You can continue to hit n (or gn ) to select the area between the current
   match and the next match.

'gi' Move to the last insertion you did and switch to INSERT mode.
Pretty useful if you stopped your editing to look at some other file.

'gf' Edit the file located at the filepath under your cursor.
        You can use CTRL+W CTRL+F to open the file in a new window.
        It can open the URL under your cursor if you have the plugin netrw .

Clean up buffers ~
Want to wipe out all buffers in current session containing `snap` in its name?
Just type ':bw *snap<TAB><C-a><CR>'. The `<TAB>` is required for take a quick
look which buffers will be wiped-out. Another solution might be this: >

        :bufdo if expand("%") =~ '.*snap.*' | bw | endif
<
Use templates ~
Want to start new files with a template. Read more here `:help template`.

Insert newlines~
When working text-centric it may ease your workflow to add this mapping. >

	nnoremap <expr> <CR> &modifiable ? "A\<CR>" : "\<CR>"
<
Custom Command Completion ~
Here is a Vim script to show custom completion of a new command: >

        function! CompleteFavPath(arg_lead, cmd_line, cur_pos)
          let l:matchingKeys = ""
          for k in sort(keys(g:workspacePathDict))
            if match(k, a:arg_lead) >= 0
              let l:matchingKeys .=  k . "\n"
            endif
          endfor
          return l:matchingKeys
        endfunction

        function! GotoFavPath(pathKey)
          if has_key(g:workspacePathDict, a:pathKey)
            exe "cd " . g:workspacePathDict[a:pathKey]
          endif
        endfunction
        let g:workspacePathDict = {"vim": "~\\vimfiles", "emacs": "~\\.emacs.d"}
        command! -nargs=1 -complete=custom,CompleteFavPath WorkspacePath call GotoFavPath('<args>')
<

How to replace a word in lines im interested in? ~

For example, replace 'foo' to 'hey' if a line contains 'hi'.  This line does
the trick: `:g/hi/ s/foo/hey/g`

How to delete lines with a certain pattern?

A 'diff -ru dirA dirB' may has a lot of annoying lines in the output. To look
at the different files: `g/^Only/normal dd` . Or the other way round use the
`g/^Files/normal dd` to look at the missing files.

GREP ~

Vimgrep can run on any OS. But performance is somehow week. Speed up on
recursive operation can be achieved by setting a proper value for option
'wildoptions' to ignore a set of sub-directories.

Even under Windows, grep-commands can run on bigger code basis even without
any special tool. The method uses a kind of index-file with all C an H files.
This file is used by Windows-standard program `findstr`.  Works quit fast! >

        call writefile(split(globpath('.', '**/*.[ch]')), "files")
        set gp=findstr\ /N\ /F:files
<
A nice addition to spice up the `:grep` experience: Run `:grep` with the
current word under cursor, highlighted in the results. Needs option `hlsearch`
to be set. >
        nnoremap <Leader>g :let @/="<C-r><C-w>"<CR>:silent grep <C-r><C-w> . <CR> :cfirst<CR>
<
Ripgrep works very well on Windows. To setup Vim for rg use this >
        set gp=rg\ --vimgrep\ -tc gfm=%f:%l:%c:%m
<

Show unsaved buffers ~
Simply enter `:ls +` to get a filtered view of unsaved buffers. The unfiltered
output of the `:ls` command indicates those buffers with the plus sign.

How to remove ^M ~
In command mode you can use this substitute command `:%s/<C-v><C-m>//`.  If
you like to remove the annoying character from VimL script, use `:%s/\r//e`.
The optional `e` flag suppresses error messages if no ^M is found. Therefor, I
would recommend to use this flag from scripts.

Netrw~
Netrw comes as a prepacked plugin in Vims standard installation. To start
Netrw, type `:Explore`. The new Netrw buffer that will show up can be
customized to match your needs. This may be a good start: >
        let g:netrw_use_errorwindow = 0
        let g:netrw_liststyle = 1
<

Navigation is supported by the bookmark feature. Netrw stores bookmarks
permanently in file .netrwbook, located in Vims home directory. To store a new
bookmark press `mb`. To remove it, press `mB`. A preceding bookmark number is
accepted. To find out the bookmark number for all bookmark, press `qb`. To go
to a bookmark, press `gb`.

The list of bookmarks also displays the history marks. Those history marks are
set when visiting a new directory. Use keys `u` and `U` to walk backward and
forward in Netrws directory history.

To change the current directory `:pwd` to the actual display Netrw directory
press key `c`.

WORDS and words ~
Vim defines a WORD as a set of consecutive characters. The normal mode command
`dW` will delete A/path/like/this assuming cursors positions is on the A
character. Using normal mode command `dw` (cursors position is on A character)
will delete only the A.

------------------------------------------------------------------------------
7. Tips                                                  *mastering-vim-script*

Look up on current tab page if a specifc buffer is visible: >

	vim9script
	var visible_filetypes = map(getwininfo(), "getbufvar(v:val['bufnr'], '&ft')")
	if index(visible_filetypes, "netrw") >= 0
       		echo "hello"
	endif
<
------------------------------------------------------------------------------
 vim:tw=78:ts=8:noet:ft=help:norl:

